// Test program. Should be on the master.

#define CONNECTION 1
#define INTERVAL_TIME 3000

char y = LCD_LINE1;
byte x = 0;

void displayResult(byte result) {
  PlayFile("! Click.rso");
  NumOut(x, y, result);

  y -= 8;
  if (y < 0) {
    x += 30;
    y = LCD_LINE1;
  }
  Wait(INTERVAL_TIME);
}

task main () {
  // SOUNDS

  //Start the little pg
  displayResult(RemoteStartProgram(CONNECTION, "PlayClick.rxe"));

  // OBSERVATION: if a pg is already running on the slave, it is not stopped.

  // Stop it
  displayResult(RemoteStopProgram(CONNECTION));

  // OBSERVATION: if a pg was already running on the slave, RemoteStopProgram()
  // stops it and start "PlayClick.rxe" instead like if RemoteStartProgram() had
  // queued it.

  // Play a file (no loop)
  displayResult(RemotePlaySoundFile(CONNECTION, "! Attention.rso", false));
  // Play a tone
  displayResult(RemotePlayTone(CONNECTION, 440, 1000));
  // Play a file in loop
  displayResult(RemotePlaySoundFile(CONNECTION, "! Attention.rso", true));
  // Stop
  displayResult(RemoteStopSound(CONNECTION));
  
  // MOTORS
  
  // Activate motor un regulated
  displayResult(RemoteSetOutputState(CONNECTION, OUT_A, 50, OUT_MODE_MOTORON, 0, 0, OUT_RUNSTATE_RUNNING, 0));
  // Activate motor regulated
  displayResult(RemoteSetOutputState(CONNECTION, OUT_A, 50, OUT_MODE_REGULATED, OUT_REGMODE_SPEED, 0, OUT_RUNSTATE_RUNNING, 180));
  
  // OBSERVATION: this call does not work: the motor on the slave stops.
  // Maybe it is because I do not use turnpct, but I do not know what this arg
  // is for.
  
  // Deactivate it
  displayResult(RemoteSetOutputState(CONNECTION, OUT_A, 0, OUT_MODE_COAST, 0, 0, OUT_RUNSTATE_RUNNING, 0));
  // Send keep alive notification
  displayResult(RemoteKeepAlive(CONNECTION));
  // Start monitoring of inputs and outputs on slave
  displayResult(RemoteStartProgram(CONNECTION, "DisplayInput.rxe"));
  // Turn the motor (slave should display a value != 0)
  displayResult(RemoteSetOutputState(CONNECTION, OUT_A, 70, OUT_MODE_MOTORON, 0, 0, OUT_RUNSTATE_RUNNING, 30));
  // Reset its position (slave should display a value of 0)
  displayResult(RemoteResetMotorPosition(CONNECTION, OUT_A, false));
  
  // INPUTS
  
  // Activate the light sensor
  displayResult(RemoteSetInputMode(CONNECTION, S1, SENSOR_TYPE_LIGHT_ACTIVE, SENSOR_MODE_RAW));
  // Resets its scaled value (???)
  displayResult(RemoteResetScaledValue(CONNECTION, S1));

  // OBSERVATION: no idea what this call does.

  // Pass in percentage
  displayResult(RemoteSetInputMode(CONNECTION, S1, SENSOR_TYPE_LIGHT_ACTIVE, SENSOR_MODE_PERCENT));

  while(!ButtonState(BTNCENTER));
}
