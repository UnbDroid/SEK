// Base code and tips for HighTechnic Color Sensor set and usage
//
// Written by the members of SEK-Sabb 2017

#define HT_COLOR IN_1

#define WHITE  1
#define BLACK  2
#define RED    3
#define GREEN  4
#define BLUE   5
#define YELLOW 6

// To use the HT Color Sensor, you will need 4 variables, to which the sensor will return the read values. Those variables are listed below:
byte num, red, green, blue, white, color;
// Note that if you are using more than one sensor in your robot, it's better and more practical if you do *not* use the same variables for both sensors

// In most cases, you will need to differentiate multiple colors. In order to do that, we highly recommend you to go through a process of calibration to collect
// the intervals of values that each variable assume when the sensor is pointed at each color. After that, a great method is creating a function that analyses the
// variables values and decides which color the sensor is seeing.
// We also recommend that you primarily use the "num" value to differentiate colors. If this value is not enough to choose the color precisely, use the other variables,
// according to the values obtained in calibration, to take preciser decisions.

// Here's an example of how to use the sensor
sub detect_colors(){
    ReadSensorHTColor2Active(HT_COLOR, num, red, green, blue, white);

    // The values listed below are just examples and depend on the calibration
    if(num == 14)
        color = WHITE;
    else if(num == 12)
        if(white > 217)
            color = WHITE;
        else
            color = BLACK;
    else if(num == 17)
        if(white > 217)
            color = WHITE;
        else if(white < 90)
            color = BLACK;
    else if(num == 13)
        color = WHITE;
    else if(num == 3 || num == 4)
        color = GREEN;
    else if(num == 5 || num == 6)
        color = YELLOW;
    else if(num == 7)
        if(green > 130)
            color = YELLOW;
        else
            color = RED;
    else if(num > 7 && num <= 10)
        color = RED;
    else if(num == 2)
        color = BLUE;
}

task main(){

	// When setting the HT Color Sensor, pay attention to the fact that you need to firstly set the port to Lowspeed, and only after that use SetHTColor2Mode() function
    SetSensorLowspeed(HT_COLOR);
    SetHTColor2Mode(HT_COLOR, HT_CMD_COLOR2_ACTIVE);
    // The second argument of this function sets the sensor mode. Is up to you to test and decide in the calibration which mode to use, here's the link for every possible mode:
    // http://bricxcc.sourceforge.net/nbc/nxcdoc/nxcapi/group___h_t_color2_constants.html

    // This part is to help you test if the function is working properly
	while(1){
        detect_colors();

        ClearLine(LCD_LINE1);
        TextOut(0, LCD_LINE1, "COLOR:");
        NumOut(50, LCD_LINE1, color);
    }
}
