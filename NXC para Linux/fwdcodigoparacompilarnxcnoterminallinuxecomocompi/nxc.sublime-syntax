%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - nxc
scope: source.nxc
contexts:
  main:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character
    - match: '"'
      scope: punctuation.definition.string.begin.c
      push: double_quoted_string

    # Comments begin with a '//' and finish at the end of the line
    - match: '//'
      scope: punctuation.definition.comment.c
      push: line_comment

    # Keywords are if, else for and while.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: '\b(if|else|for|while)\b'
      scope: keyword.control.c

    - match: '(#define|#include)'
      scope: keyword.control.c

    # Numbers
    - match: '\b(-)?[0-9.]+\b'
      scope: constant.numeric.c

    - match: \btypedef\b
      scope: keyword.control.c
      set: [typedef_after_typename, typename]

    - match: '\b(OUT_A|OUT_B|OUT_C|OUT_AB|OUT_AC|OUT_BC)\b'
      scope: keyword.control.c    

    - match: '\b(IN_1|IN_2|IN_3|IN_4)\b'
      scope: keyword.control.c



  typename:
    - match: 'struct'
      set:
        - match: "{"
          set:
            - match: "}"
              pop: true
    - match: \b[A-Za-z_][A-Za-z_0-9]*\b
      pop: true

  typedef_after_typename:
    - match: \b[A-Za-z_][A-Za-z_0-9]*\b
      scope: entity.name.type
      pop: true



  expr:
    - include: comments
    - match: \b[0-9]+\b
      scope: constant.numeric.c

  double_quoted_string:
    - meta_scope: string.quoted.double.c
    - match: '\\.'
      scope: constant.character.escape.c
    - match: '"'
      scope: punctuation.definition.string.end.c
      pop: true

  line_comment:
    - meta_scope: comment.line.c
    - match: $
      pop: true
